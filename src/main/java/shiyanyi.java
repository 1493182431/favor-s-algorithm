/**
 * @description:
 * @author：Favor
 * @date: 2024/4/26
 */
import java.util.HashSet;
import java.util.Set;

public class shiyanyi {
    public static int[][] DES_S_BOX = {
            {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7, 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8, 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0, 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13},
            {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10, 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5, 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15, 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9},
            {10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8, 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1, 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7, 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12},
            {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15, 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9, 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4, 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14},
            {2, 12, 4, 1, 7, 10, 11, 6, 5, 8, 3, 15, 13, 0, 14, 9, 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 13, 3, 9, 8, 6, 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14, 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3},
            {12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11, 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8, 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6, 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13},
            {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1, 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6, 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2, 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12},
            {13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7, 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2, 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8, 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    public static int[][] AES_S_BOX = {
            {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
            {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
            {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
            {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
            {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
            {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
            {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
            {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
            {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
            {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
            {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
            {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
            {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
            {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
            {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
            {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};
    public static int[][] SMS4_S_BOX = {
            {0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05},
            {0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99},
            {0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62},
            {0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6},
            {0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8},
            {0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35},
            {0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87},
            {0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e},
            {0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1},
            {0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3},
            {0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f},
            {0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51},
            {0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8},
            {0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0},
            {0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84},
            {0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48}};

    public static void main(String[] args) {
        DES();
        //AES();
        //SMS4();
    }

    public static void DES() {
        int[][][] count = new int[8][64][16];
        Set[][][] set = new HashSet[8][64][16];
        for (int i = 0; i < 8; i++)
            for (int j = 0; j < 64; j++)//第一个输入j
                for (int k = 0; k < 64; k++) {//第二个输入k
                    int t1 = (j & 0x20) | ((j & 0x01) << 4) | ((j >> 1) & 0xf);//用于第一个输入查找s盒
                    int t2 = (k & 0x20) | ((k & 0x01) << 4) | ((k >> 1) & 0xf);//用于第二个输入查找s盒
                    count[i][j ^ k][DES_S_BOX[i][t1] ^ DES_S_BOX[i][t2]]++;//对应分布表的项加一
                    if (set[i][j ^ k][DES_S_BOX[i][t1] ^ DES_S_BOX[i][t2]] == null)
                        set[i][j ^ k][DES_S_BOX[i][t1] ^ DES_S_BOX[i][t2]] = new HashSet<String>();
                    set[i][j ^ k][DES_S_BOX[i][t1] ^ DES_S_BOX[i][t2]].add("(" + j + "," + k + ")");//set用于存储差分可能的输入值
                }
        for (int i = 0; i < 8; i++) {
            int max = 0, mi = 0, mj = 0, mk = 0;
            for (int j = 0; j < 64; j++) {
                for (int k = 0; k < 16; k++) {
                    System.out.print(count[i][j][k] + "\t");
                    if (j != 0 && max < count[i][j][k]) {
                        max = count[i][j][k];
                        mi = i;
                        mj = j;
                        mk = k;
                    }
                    System.out.print(" ");
                }
                System.out.println();
            }
            System.out.print("S" + (i + 1) + "盒的" + "差分最大值为：" + max + "\n" + "该差分值可能的输入值为：\n" + set[mi][mj][mk].toString() + "\n\n\n");
        }
    }

    public static void AES() {
        int[][] count = new int[256][256];
        Set[][] set = new Set[256][256];
        for (int i = 0; i < 16; i++) {//第一个输入的前4位
            for (int j = 0; j < 16; j++) {//第一个输入的后4位
                for (int k = 0; k < 16; k++) {//第二个输入的前4位
                    for (int l = 0; l < 16; l++) {//第二个输入的后4位
                        int row = (i * 16 + j) ^ (k * 16 + l);
                        int column = AES_S_BOX[i][j] ^ AES_S_BOX[k][l];
                        count[row][column]++;
                        if (set[row][column] == null) set[row][column] = new HashSet<String>();
                        set[row][column].add("(" + "0x" + Integer.toHexString(i * 16 + j) + "," + "0x" + Integer.toHexString(k * 16 + l) + ")");
                    }
                }
            }
        }
        int max = 0, mi = 0, mj = 0;
        for (int i = 0; i < 256; i++) {
            for (int j = 0; j < 256; j++) {
                System.out.print(count[i][j] + " ");
                if (i != 0 && count[i][j] > max) {
                    max = count[i][j];
                    mi = i;
                    mj = j;
                }
            }
            System.out.println();
        }
        System.out.print("差分最大值为：" + max + "\n" + "该差分值可能的输入值为：" + set[mi][mj].toString() + "\n\n\n");
    }

    public static void SMS4() {
        int[][] count = new int[256][256];
        Set[][] set = new Set[256][256];
        for (int i = 0; i < 16; i++) {//第一个输入的前4位
            for (int j = 0; j < 16; j++) {//第一个输入的后4位
                for (int k = 0; k < 16; k++) {//第二个输入的前4位
                    for (int l = 0; l < 16; l++) {//第二个输入的后4位
                        int row = (i * 16 + j) ^ (k * 16 + l);
                        int column = SMS4_S_BOX[i][j] ^ SMS4_S_BOX[k][l];
                        count[row][column]++;
                        if (set[row][column] == null) set[row][column] = new HashSet<String>();
                        set[row][column].add("(" + "0x" + Integer.toHexString(i * 16 + j) + "," + "0x" + Integer.toHexString(k * 16 + l) + ")");
                    }
                }
            }
        }
        int max = 0, mi = 0, mj = 0;
        for (int i = 0; i < 256; i++) {
            for (int j = 0; j < 256; j++) {
                System.out.print(count[i][j] + " ");
                if (i != 0 && count[i][j] > max) {
                    max = count[i][j];
                    mi = i;
                    mj = j;
                }
            }
            System.out.println();
        }
        System.out.print("差分最大值为：" + max + "\n" + "该差分值可能的输入值为：" + set[mi][mj].toString() + "\n\n\n");
    }
}
