package viewed;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

/**
 * @description:
 * @author：Favor
 * @date: 2024/4/8
 */
public class migong_bfs {
    static int row=29,column=49;
    static int[][]m=new int[row+1][column+1];
    static int[][]flag=new int[row+1][column+1];
    static int[][]op=new int[][]{{1,0},{0,-1},{0,1},{-1,0}};
    static Character[]ch=new Character[]{'D','L','R','U'};
    static class node{
        int i=0;
        int j=0;
        public node(int i, int j) {
            this.i = i;
            this.j = j;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        //在此输入您的代码...
        flag[0][0]=-1;
        for (int i = 0; i <= row; i++) {
            String str=scan.nextLine();
            for (int j = 0; j <= column; j++) {
                m[i][j]= str.charAt(j)-48;
            }
        }
        //BFS走迷宫
        Queue<node>queue=new LinkedList<>();
        queue.add(new node(0, 0));
        while (!queue.isEmpty()){
            node cur=queue.poll();
            for (int i = 0; i < 4; i++) {
                int x=cur.i+op[i][0];
                int y=cur.j+op[i][1];
                if(x>=0&&x<=row&&y>=0&&y<=column&&m[x][y]!=1&&flag[x][y]==0){
                    queue.add(new node(x,y));
                    flag[x][y]=i+1;
                }
                if(x==row&&y==column) {
                    queue.clear();
                    break;
                }
            }
        }
        //从终点开始根据已经标记过的flag数组找到最短路径
        int x=row;
        int y=column;
        ArrayList<Character>list=new ArrayList<>();
        while(flag[x][y]!=-1){
            int index=flag[x][y]-1;
            list.add(ch[index]);
            x-=op[index][0];
            y-=op[index][1];
        }
        for (int i = list.size()-1; i >= 0; i--) {
            System.out.print(list.get(i));
        }
        scan.close();
    }
}

//01010101001011001001010110010110100100001000101010
//00001000100000101010010000100000001001100110100101
//01111011010010001000001101001011100011000000010000
//01000000001010100011010000101000001010101011001011
//00011111000000101000010010100010100000101100000000
//11001000110101000010101100011010011010101011110111
//00011011010101001001001010000001000101001110000000
//10100000101000100110101010111110011000010000111010
//00111000001010100001100010000001000101001100001001
//11000110100001110010001001010101010101010001101000
//00010000100100000101001010101110100010101010000101
//11100100101001001000010000010101010100100100010100
//00000010000000101011001111010001100000101010100011
//10101010011100001000011000010110011110110100001000
//10101010100001101010100101000010100000111011101001
//10000000101100010000101100101101001011100000000100
//10101001000000010100100001000100000100011110101001
//00101001010101101001010100011010101101110000110101
//11001010000100001100000010100101000001000111000010
//00001000110000110101101000000100101001001000011101
//10100101000101000000001110110010110101101010100001
//00101000010000110101010000100010001001000100010101
//10100001000110010001000010101001010101011111010010
//00000100101000000110010100101001000001000000000010
//11010000001001110111001001000011101001011011101000
//00000110100010001000100000001000011101000000110011
//10101000101000100010001111100010101001010000001000
//10000010100101001010110000000100101010001011101000
//00111100001000010000000110111000000001000000001011
//10000001100111010111010001000110111010101101111000
